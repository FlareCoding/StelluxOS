#ifndef XHCI_COMMON_H
#define XHCI_COMMON_H

#include <types.h>

// Configuration Definitions
#define XHCI_COMMAND_RING_TRB_COUNT     256
#define XHCI_EVENT_RING_TRB_COUNT       256
#define XHCI_TRANSFER_RING_TRB_COUNT    256

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 358)

Run/Stop (R/S) – RW. Default = ‘0’. ‘1’ = Run. ‘0’ = Stop. When set to a ‘1’, the xHC proceeds with
execution of the schedule. The xHC continues execution as long as this bit is set to a ‘1’. When this bit
is cleared to ‘0’, the xHC completes any current or queued commands or TDs, and any USB transactions
associated with them, then halts.
Refer to section 5.4.1.1 for more information on how R/S shall be managed.
The xHC shall halt within 16 ms. after software clears the Run/Stop bit if the above conditions have
been met.
The HCHalted (HCH) bit in the USBSTS register indicates when the xHC has finished its pending
pipelined transactions and has entered the stopped state. Software shall not write a ‘1’ to this flag
unless the xHC is in the Halted state (that is, HCH in the USBSTS register is ‘1’). Doing so may yield
undefined results. Writing a ‘0’ to this flag when the xHC is in the Running state (that is, HCH = ‘0’) and
any Event Rings are in the Event Ring Full state (refer to section 4.9.4) may result in lost events.
When this register is exposed by a Virtual Function (VF), this bit only controls the run state of the xHC
instance presented by the selected VF. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_RUN_STOP                    (1 << 0)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 358)

Host Controller Reset (HCRST) – RW. Default = ‘0’. This control bit is used by software to reset the
host controller. The effects of this bit on the xHC and the Root Hub registers are similar to a Chip
Hardware Reset.
When software writes a ‘1’ to this bit, the Host Controller resets its internal pipelines, timers, counters,
state machines, etc. to their initial value. Any transaction currently in progress on the USB is
immediately terminated. A USB reset shall not be driven on USB2 downstream ports, however a Hot or
Warm Reset79 shall be initiated on USB3 Root Hub downstream ports.
PCI Configuration registers are not affected by this reset. All operational registers, including port
registers and port state machines are set to their initial values. Software shall reinitialize the host
controller as described in Section 4.2 in order to return the host controller to an operational state.
This bit is cleared to ‘0’ by the Host Controller when the reset process is complete. Software cannot
terminate the reset process early by writing a ‘0’ to this bit and shall not write any xHC Operational or
Runtime registers until while HCRST is ‘1’. Note, the completion of the xHC reset process is not gated by
the Root Hub port reset process.
Software shall not set this bit to ‘1’ when the HCHalted (HCH) bit in the USBSTS register is a ‘0’.
Attempting to reset an actively running host controller may result in undefined behavior.
When this register is exposed by a Virtual Function (VF), this bit only resets the xHC instance presented
by the selected VF. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_HCRESET                     (1 << 1)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Interrupter Enable (INTE) – RW. Default = ‘0’. This bit provides system software with a means of
enabling or disabling the host system interrupts generated by Interrupters. When this bit is a ‘1’, then
Interrupter host system interrupt generation is allowed, for example, the xHC shall issue an interrupt at
the next interrupt threshold if the host system interrupt mechanism (for example, MSI, MSI-X, etc.) is
enabled. The interrupt is acknowledged by a host system interrupt specific mechanism.
When this register is exposed by a Virtual Function (VF), this bit only enables the set of Interrupters
assigned to the selected VF. Refer to section 7.7.2 for more information.
*/
#define XHCI_USBCMD_INTERRUPTER_ENABLE          (1 << 2)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Host System Error Enable (HSEE) – RW. Default = ‘0’. When this bit is a ‘1’, and the HSE bit in the
USBSTS register is a ‘1’, the xHC shall assert out-of-band error signaling to the host. The signaling is
acknowledged by software clearing the HSE bit. Refer to section 4.10.2.6 for more information.
When this register is exposed by a Virtual Function (VF), the effect of the assertion of this bit on the
Physical Function (PF0) is determined by the VMM. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_HOSTSYS_ERROR_ENABLE        (1 << 3)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Light Host Controller Reset (LHCRST) – RO or RW. Optional normative. Default = ‘0’. If the Light
HC Reset Capability (LHRC) bit in the HCCPARAMS1 register is ‘1’, then this flag allows the driver to
reset the xHC without affecting the state of the ports.
A system software read of this bit as ‘0’ indicates the Light Host Controller Reset has completed and it is
safe for software to re-initialize the xHC. A software read of this bit as a ‘1’ indicates the Light Host
Controller Reset has not yet completed.
If not implemented, a read of this flag shall always return a ‘0’.
All registers in the Aux Power well shall maintain the values that had been asserted prior to the Light
Host Controller Reset. Refer to section 4.23.1 for more information.
When this register is exposed by a Virtual Function (VF), this bit only generates a Light Reset to the
xHC instance presented by the selected VF, for example, Disable the VFs’ device slots and set the
associated VF Run bit to Stopped. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_LIGHT_HCRESET               (1 << 7)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Controller Save State (CSS) - RW. Default = ‘0’. When written by software with ‘1’ and HCHalted
(HCH) = ‘1’, then the xHC shall save any internal state (that may be restored by a subsequent Restore
State operation) and if FSC = '1' any cached Slot, Endpoint, Stream, or other Context information (so
that software may save it). When written by software with ‘1’ and HCHalted (HCH) = ‘0’, or written with
‘0’, no Save State operation shall be performed. This flag always returns ‘0’ when read. Refer to the
Save State Status (SSS) flag in the USBSTS register for information on Save State completion. Refer to
section 4.23.2 for more information on xHC Save/Restore operation. Note that undefined behavior may
occur if a Save State operation is initiated while Restore State Status (RSS) = ‘1’.
When this register is exposed by a Virtual Function (VF), this bit only controls saving the state of the
xHC instance presented by the selected VF. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_CSS                         (1 << 8)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Controller Restore State (CRS) - RW. Default = ‘0’. When set to ‘1’, and HCHalted (HCH) = ‘1’, then
the xHC shall perform a Restore State operation and restore its internal state. When set to ‘1’ and
Run/Stop (R/S) = ‘1’ or HCHalted (HCH) = ‘0’, or when cleared to ‘0’, no Restore State operation shall
be performed. This flag always returns ‘0’ when read. Refer to the Restore State Status (RSS) flag in
the USBSTS register for information on Restore State completion. Refer to section 4.23.2 for more
information. Note that undefined behavior may occur if a Restore State operation is initiated while Save
State Status (SSS) = ‘1’.
When this register is exposed by a Virtual Function (VF), this bit only controls restoring the state of the
xHC instance presented by the selected VF. Refer to section 8 for more information.
*/
#define XHCI_USBCMD_CRS                         (1 << 9)

/*
// xHci Spec Section 5.4.1 USB Table 5-20: USB Command Register Bit Definitions (USBCMD) (page 359)

Enable Wrap Event (EWE) - RW. Default = ‘0’. When set to ‘1’, the xHC shall generate a MFINDEX
Wrap Event every time the MFINDEX register transitions from 03FFFh to 0. When cleared to ‘0’ no
MFINDEX Wrap Events are generated. Refer to section 4.14.2 for more information.
When this register is exposed by a Virtual Function (VF), the generation of MFINDEX Wrap Events to VFs
shall be emulated by the VMM. 
*/
#define XHCI_USBCMD_EWE                         (1 << 10)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 362)

HCHalted (HCH) – RO. Default = ‘1’. This bit is a ‘0’ whenever the Run/Stop (R/S)
bit is a ‘1’. The xHC sets this bit to ‘1’ after it has stopped executing as a result of the
Run/Stop (R/S) bit being cleared to ‘0’, either by software or by the xHC hardware
(for example, internal error).
If this bit is '1', then SOFs, microSOFs, or Isochronous Timestamp Packets (ITP) shall
not be generated by the xHC, and any received Transaction Packet shall be dropped.
When this register is exposed by a Virtual Function (VF), this bit only reflects the
Halted state of the xHC instance presented by the selected VF. Refer to section 8 for
more information.
*/
#define XHCI_USBSTS_HCH                         (1 << 0)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 362)

Host System Error (HSE) – RW1C. Default = ‘0’. The xHC sets this bit to ‘1’ when
a serious error is detected, either internal to the xHC or during a host system access
involving the xHC module. (In a PCI system, conditions that set this bit to ‘1’ include
PCI Parity error, PCI Master Abort, and PCI Target Abort.) When this error occurs,
the xHC clears the Run/Stop (R/S) bit in the USBCMD register to prevent further
execution of the scheduled TDs. If the HSEE bit in the USBCMD register is a ‘1’, the
xHC shall also assert out-of-band error signaling to the host. Refer to section
4.10.2.6 for more information.
When this register is exposed by a Virtual Function (VF), the assertion of this bit
affects all VFs and reflects the Host System Error state of the Physical Function
(PF0). Refer to section 8 for more information.
*/
#define XHCI_USBSTS_HSE                         (1 << 2)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 362)

Event Interrupt (EINT) – RW1C. Default = ‘0’. The xHC sets this bit to ‘1’ when
the Interrupt Pending (IP) bit of any Interrupter transitions from ‘0’ to ‘1’. Refer to
section 7.1.2 for use.
Software that uses EINT shall clear it prior to clearing any IP flags. A race condition
may occur if software clears the IP flags then clears the EINT flag, and between the
operations another IP ‘0’ to '1' transition occurs. In this case the new IP transition
shall be lost.
When this register is exposed by a Virtual Function (VF), this bit is the logical 'OR' of
the IP bits for the Interrupters assigned to the selected VF. And it shall be cleared to
‘0’ when all associated interrupter IP bits are cleared, that is, all the VF’s Interrupter
Event Ring(s) are empty. Refer to section 8 for more information.
*/
#define XHCI_USBSTS_EINT                        (1 << 3)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 362)

Port Change Detect (PCD) – RW1C. Default = ‘0’. The xHC sets this bit to a ‘1’
when any port has a change bit transition from a ‘0’ to a ‘1’.
This bit is allowed to be maintained in the Aux Power well. Alternatively, it is also
acceptable that on a D3 to D0 transition of the xHC, this bit is loaded with the OR of
all of the PORTSC change bits. Refer to section 4.19.3.
This bit provides system software an efficient means of determining if there has been
Root Hub port activity. Refer to section 4.15.2.3 for more information.
When this register is exposed by a Virtual Function (VF), the VMM determines the
state of this bit as a function of the Root Hub Ports associated with the Device Slots
assigned to the selected VF. Refer to section 8 for more information.
*/
#define XHCI_USBSTS_PCD                         (1 << 4)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 363)

Save State Status (SSS) - RO. Default = ‘0’. When the Controller Save State
(CSS) flag in the USBCMD register is written with ‘1’ this bit shall be set to ‘1’ and
remain 1 while the xHC saves its internal state. When the Save State operation is
complete, this bit shall be cleared to ‘0’. Refer to section 4.23.2 for more
information.
When this register is exposed by a Virtual Function (VF), the VMM determines the
state of this bit as a function of the saving the state for the selected VF. Refer to
section 8 for more information.
*/
#define XHCI_USBSTS_SSS                         (1 << 8)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 363)

Restore State Status (RSS) - RO. Default = ‘0’. When the Controller Restore State
(CRS) flag in the USBCMD register is written with ‘1’ this bit shall be set to ‘1’ and
remain 1 while the xHC restores its internal state. When the Restore State operation
is complete, this bit shall be cleared to ‘0’. Refer to section 4.23.2 for more
information.
When this register is exposed by a Virtual Function (VF), the VMM determines the
state of this bit as a function of the restoring the state for the selected VF. Refer to
section 8 for more information.
*/
#define XHCI_USBSTS_RSS                         (1 << 9)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 363)

Save/Restore Error (SRE) - RW1C. Default = ‘0’. If an error occurs during a Save
or Restore operation this bit shall be set to ‘1’. This bit shall be cleared to ‘0’ when a
Save or Restore operation is initiated or when written with ‘1’. Refer to section 4.23.2
for more information.
When this register is exposed by a Virtual Function (VF), the VMM determines the
state of this bit as a function of the Save/Restore completion status for the selected
VF. Refer to section 8 for more information.
*/
#define XHCI_USBSTS_SRE                         (1 << 10)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 363)

Controller Not Ready (CNR) – RO. Default = ‘1’. ‘0’ = Ready and ‘1’ = Not Ready.
Software shall not write any Doorbell or Operational register of the xHC, other than
the USBSTS register, until CNR = ‘0’. This flag is set by the xHC after a Chip
Hardware Reset and cleared when the xHC is ready to begin accepting register
writes. This flag shall remain cleared (‘0’) until the next Chip Hardware Reset.
*/
#define XHCI_USBSTS_CNR                         (1 << 11)

/*
// xHci Spec Section 5.4.2 Table 5-21: USB Status Register Bit Definitions (USBSTS) (page 363)

Host Controller Error (HCE) – RO. Default = 0. 0’ = No internal xHC error
conditions exist and ‘1’ = Internal xHC error condition. This flag shall be set to
indicate that an internal error condition has been detected which requires software to
reset and reinitialize the xHC. Refer to section 4.24.1 for more information.
*/
#define XHCI_USBSTS_HCE                         (1 << 12)

/*
// xHci Spec Section 5.3.3 Table 5-10: Host Controller Structural Parameters 1 (HCSPARAMS1) (page 348)

Number of Device Slots (MaxSlots). This field specifies the maximum number of
Device Context Structures and Doorbell Array entries this host controller can support.
Valid values are in the range of 1 to 255. The value of ‘0’ is reserved.
*/
#define XHCI_MAX_DEVICE_SLOTS(regs) ((regs->hcsparams1) & 0xFF)

/*
// xHci Spec Section 5.3.3 Table 5-10: Host Controller Structural Parameters 1 (HCSPARAMS1) (page 348)

Number of Interrupters (MaxIntrs). This field specifies the number of
Interrupters implemented on this host controller. Each Interrupter may be allocated
to a MSI or MSI-X vector and controls its generation and moderation.
The value of this field determines how many Interrupter Register Sets are
addressable in the Runtime Register Space (refer to section 5.5). Valid values are in
the range of 1h to 400h. A ‘0’ in this field is undefined.
*/
#define XHCI_MAX_INTERRUPTERS(regs) ((regs->hcsparams1 >> 8) & 0x7FF)

/*
// xHci Spec Section 5.3.3 Table 5-10: Host Controller Structural Parameters 1 (HCSPARAMS1) (page 348)

Number of Ports (MaxPorts). This field specifies the maximum Port Number value,
that is, the highest numbered Port Register Set that are addressable in the
Operational Register Space (refer to Table 5-18). Valid values are in the range of 1h
to FFh.
The value in this field shall reflect the maximum Port Number value assigned by an
xHCI Supported Protocol Capability, described in section 7.2. Software shall refer to
these capabilities to identify whether a specific Port Number is valid, and the protocol
supported by the associated Port Register Set.
*/
#define XHCI_MAX_PORTS(regs) ((regs->hcsparams1 >> 24) & 0xFF)

/*
// xHci Spec Section 5.3.4 Table 5-11: Host Controller Structural Parameters 2 (HCSPARAMS2) (page 349)

Isochronous Scheduling Threshold (IST). Default = implementation dependent.
The value in this field indicates to system software the minimum distance (in time)
that it is required to stay ahead of the host controller while adding TRBs, in order to
have the host controller process them at the correct time. The value shall be
specified in terms of number of frames/microframes.
If bit [3] of IST is cleared to '0', software can add a TRB no later than IST[2:0]
Microframes before that TRB is scheduled to be executed.
If bit [3] of IST is set to '1', software can add a TRB no later than IST[2:0] Frames
before that TRB is scheduled to be executed.
Refer to Section 4.14.2 for details on how software uses this information for
scheduling isochronous transfers.
*/
#define XHCI_IST(regs) ((regs->hcsparams2) & 0xF)

/*
// xHci Spec Section 5.3.4 Table 5-11: Host Controller Structural Parameters 2 (HCSPARAMS2) (page 349)

Event Ring Segment Table Max (ERST Max). Default = implementation
dependent. Valid values are 0 – 15. This field determines the maximum value
supported the Event Ring Segment Table Base Size registers (5.5.2.3.1), where:
    The maximum number of Event Ring Segment Table entries = 2 ERST Max

For example, if the ERST Max = 7, then the xHC Event Ring Segment Table(s)
supports up to 128 entries, 15 then 32K entries, etc.
*/
#define XHCI_ERST_MAX(regs) ((regs->hcsparams2 >> 4) & 0xF)

/*
// xHci Spec Section 5.3.4 Table 5-11: Host Controller Structural Parameters 2 (HCSPARAMS2) (page 349)

Max Scratchpad Buffers (Max Scratchpad Bufs Hi). Default = implementation
dependent. This field indicates the high order 5 bits of the number of Scratchpad
Buffers system software shall reserve for the xHC. Refer to section 4.20 for more
information.
*/
#define XHCI_MAX_SCRATCHPAD_BUFS_HI(regs) ((regs->hcsparams2 >> 21) & 0x1F)

/*
// xHci Spec Section 5.3.4 Table 5-11: Host Controller Structural Parameters 2 (HCSPARAMS2) (page 349)

Scratchpad Restore (SPR). Default = implementation dependent. If Max Scratchpad Buffers is >
‘0’ then this flag indicates whether the xHC uses the Scratchpad Buffers for saving state when
executing Save and Restore State operations. If Max Scratchpad Buffers is = ‘0’ then this flag
shall be ‘0’. Refer to section 4.23.2 for more information.
A value of ‘1’ indicates that the xHC requires the integrity of the Scratchpad Buffer space to be
maintained across power events.
A value of ‘0’ indicates that the Scratchpad Buffer space may be freed and reallocated between
power events.
*/
#define XHCI_SPR(regs) ((regs->hcsparams2 >> 26) & 0x1)

/*
// xHci Spec Section 5.3.4 Table 5-11: Host Controller Structural Parameters 2 (HCSPARAMS2) (page 349)

Max Scratchpad Buffers (Max Scratchpad Bufs Lo). Default = implementation dependent. Valid
values for Max Scratchpad Buffers (Hi and Lo) are 0-1023. This field indicates the low order 5
bits of the number of Scratchpad Buffers system software shall reserve for the xHC. Refer to
section 4.20 for more information.
*/
#define XHCI_MAX_SCRATCHPAD_BUFS_LO(regs) ((regs->hcsparams2 >> 27) & 0x1F)

// Combination of low and high bit macros for maximum scratchpad buffer count
#define XHCI_MAX_SCRATCHPAD_BUFFERS(regs) ((XHCI_MAX_SCRATCHPAD_BUFS_HI(regs) << 5) | XHCI_MAX_SCRATCHPAD_BUFS_LO(regs))

/*
// xHci Spec Section 5.3.5 Table 5-12: Host Controller Structural Parameters 3 (HCSPARAMS3) (page 350)

U1 Device Exit Latency. Worst case latency to transition a root hub Port Link State
(PLS) from U1 to U0. Applies to all root hub ports.
The following are permissible values:
    Value Description
    00h Zero
    01h Less than 1 µs
    02h Less than 2 µs.
    …
    0Ah Less than 10 µs.
    0B-FFh Reserved
*/
#define XHCI_U1_DEVICE_EXIT_LATENCY(regs) ((regs->hcsparams3) & 0xFF)

/*
// xHci Spec Section 5.3.5 Table 5-12: Host Controller Structural Parameters 3 (HCSPARAMS3) (page 350)

U2 Device Exit Latency. Worst case latency to transition from U2 to U0. Applies to
all root hub ports.
The following are permissible values:
    Value Description
    0000h Zero
    0001h Less than 1 µs.
    0002h Less than 2 µs.
    …
    07FFh Less than 2047 µs.
    0800-FFFFh Reserved
*/
#define XHCI_U2_DEVICE_EXIT_LATENCY(regs) ((regs->hcsparams3 >> 16) & 0xFFFF)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 351)

64-bit Addressing Capability77 (AC64). This flag documents the addressing range capability of this
implementation. The value of this flag determines whether the xHC has implemented the high order 32
bits of 64 bit register and data structure pointer fields. Values for this flag have the following
interpretation:
    Value Description
    0 32-bit address memory pointers implemented
    1 64-bit address memory pointers implemented
If 32-bit address memory pointers are implemented, the xHC shall ignore the high order 32 bits of 64-
bit data structure pointer fields, and system software shall ignore the high order 32 bits of 64-bit xHC
registers.
*/
#define XHCI_AC64(regs) ((regs->hccparams1) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 351)

BW Negotiation Capability (BNC). This flag identifies whether the xHC has implemented the
Bandwidth Negotiation. Values for this flag have the following interpretation:
    Value Description
    0 BW Negotiation not implemented
    1 BW Negotiation implemented
Refer to section 4.16 for more information on Bandwidth Negotiation.
*/
#define XHCI_BNC(regs) ((regs->hccparams1 >> 1) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 351)

Context Size (CSZ). If this bit is set to ‘1’, then the xHC uses 64 byte Context data structures. If this
bit is cleared to ‘0’, then the xHC uses 32 byte Context data structures.
This flag does not apply to Stream Contexts
*/
#define XHCI_CSZ(regs) ((regs->hccparams1 >> 2) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 351)

Port Power Control (PPC). This flag indicates whether the host controller implementation includes
port power control. A ‘1’ in this bit indicates the ports have port power switches. A ‘0’ in this bit
indicates the port do not have port power switches. The value of this flag affects the functionality of
the PP flag in each port status and control register (refer to Section 5.4.8).
*/
#define XHCI_PPC(regs) ((regs->hccparams1 >> 3) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Port Indicators (PIND). This bit indicates whether the xHC root hub ports support port indicator
control. When this bit is a ‘1’, the port status and control registers include a read/writeable field for
controlling the state of the port indicator. Refer to Section 5.4.8 for definition of the Port Indicator
Control field.
*/
#define XHCI_PIND(regs) ((regs->hccparams1 >> 4) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Light HC Reset Capability (LHRC). This flag indicates whether the host controller implementation
supports a Light Host Controller Reset. A ‘1’ in this bit indicates that Light Host Controller Reset is
supported. A ‘0’ in this bit indicates that Light Host Controller Reset is not supported. The value of this
flag affects the functionality of the Light Host Controller Reset (LHCRST) flag in the USBCMD register
(refer to Section 5.4.1).
*/
#define XHCI_LHRC(regs) ((regs->hccparams1 >> 5) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Latency Tolerance Messaging Capability (LTC). This flag indicates whether the host controller
implementation supports Latency Tolerance Messaging (LTM). A ‘1’ in this bit indicates that LTM is
supported. A ‘0’ in this bit indicates that LTM is not supported. Refer to section 4.13.1 for more
information on LTM.
*/
#define XHCI_LTC(regs) ((regs->hccparams1 >> 6) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

No Secondary SID Support (NSS). This flag indicates whether the host controller implementation
supports Secondary Stream IDs. A ‘1’ in this bit indicates that Secondary Stream ID decoding is not
supported. A ‘0’ in this bit indicates that Secondary Stream ID decoding is supported. (refer to
Sections 4.12.2 and 6.2.3).
*/
#define XHCI_NSS(regs) ((regs->hccparams1 >> 7) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Parse All Event Data (PAE). This flag indicates whether the host controller implementation Parses all
Event Data TRBs while advancing to the next TD after a Short Packet, or it skips all but the first Event
Data TRB. A ‘1’ in this bit indicates that all Event Data TRBs are parsed. A ‘0’ in this bit indicates that
only the first Event Data TRB is parsed (refer to section 4.10.1.1).
*/
#define XHCI_PAE(regs) ((regs->hccparams1 >> 8) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Stopped - Short Packet Capability (SPC). This flag indicates that the host controller
implementation is capable of generating a Stopped - Short Packet Completion Code. Refer to section
4.6.9 for more information.
*/
#define XHCI_SPC(regs) ((regs->hccparams1 >> 9) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Stopped EDTLA Capability (SEC). This flag indicates that the host controller implementation Stream
Context support a Stopped EDTLA field. Refer to sections 4.6.9, 4.12, and 6.4.4.1 for more
information.
Stopped EDTLA Capability support (that is, SEC = '1') shall be mandatory for all xHCI 1.1 and xHCI 1.2
compliant xHCs.
*/
#define XHCI_SEC(regs) ((regs->hccparams1 >> 10) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Contiguous Frame ID Capability (CFC). This flag indicates that the host controller implementation
is capable of matching the Frame ID of consecutive Isoch TDs. Refer to section 4.11.2.5 for more
information.
*/
#define XHCI_CFC(regs) ((regs->hccparams1 >> 11) & 0x1)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

Maximum Primary Stream Array Size (MaxPSASize). This fields identifies the maximum size
Primary Stream Array that the xHC supports. The Primary Stream Array size = 2MaxPSASize+1. Valid
MaxPSASize values are 0 to 15, where ‘0’ indicates that Streams are not supported.
*/
#define XHCI_MAXPSASIZE(regs) ((regs->hccparams1 >> 12) & 0xF)

/*
// xHci Spec Section 5.3.6 Table 5-13: Host Controller Capability 1 Parameters (HCCPARAMS1) (page 352)

xHCI Extended Capabilities Pointer (xECP). This field indicates the existence of a capabilities list.
The value of this field indicates a relative offset, in 32-bit words, from Base to the beginning of the
first extended capability.
For example, using the offset of Base is 1000h and the xECP value of 0068h, we can calculated the
following effective address of the first extended capability:
1000h + (0068h << 2) -> 1000h + 01A0h -> 11A0h
*/
#define XHCI_XECP(regs) ((regs->hccparams1 >> 16) & 0xFFFF)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 354)

U3 Entry Capability (U3C) - RO. This bit indicates whether the xHC Root Hub ports
support port Suspend Complete notification. When this bit is '1', PLC shall be
asserted on any transition of PLS to the U3 State. Refer to section 4.15.1 for more
information.
*/
#define XHCI_U3C(regs) ((regs->hccparams2) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 354)

Configure Endpoint Command Max Exit Latency Too Large Capability (CMC) -
RO. This bit indicates whether a Configure Endpoint Command is capable of
generating a Max Exit Latency Too Large Capability Error. When this bit is '1', a Max
Exit Latency Too Large Capability Error may be returned by a Configure Endpoint
Command. When this bit is '0', a Max Exit Latency Too Large Capability Error shall
not be returned by a Configure Endpoint Command. This capability is enabled by the
CME flag in the USBCMD register. Refer to sections 4.23.5.2 and 5.4.1 for more
information.
*/
#define XHCI_CMC(regs) ((regs->hccparams2 >> 1) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 354)

Force Save Context Capability (FSC) - RO. This bit indicates whether the xHC
supports the Force Save Context Capability. When this bit is '1', the Save State
operation shall save any cached Slot, Endpoint, Stream or other Context information
to memory. Refer to Implementation Note “FSC and Context handling by Save and
Restore”, and sections 4.23.2 and 5.4.1 for more information.
*/
#define XHCI_FSC(regs) ((regs->hccparams2 >> 2) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 354)

Compliance Transition Capability (CTC) - RO. This bit indicates whether the xHC
USB3 Root Hub ports support the Compliance Transition Enabled (CTE) flag. When
this bit is ‘1’, USB3 Root Hub port state machine transitions to the Compliance
substate shall be explicitly enabled software. When this bit is ‘0’, USB3 Root Hub port
state machine transitions to the Compliance substate are automatically enabled.
Refer to section 4.19.1.2.4.1 for more information.
*/
#define XHCI_CTC(regs) ((regs->hccparams2 >> 3) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Large ESIT Payload Capability (LEC) - RO. This bit indicates whether the xHC
supports ESIT Payloads greater than 48K bytes. When this bit is ‘1’, ESIT Payloads
greater than 48K bytes are supported. When this bit is ‘0’, ESIT Payloads greater
than 48K bytes are not supported. Refer to section 6.2.3.8 for more information
*/
#define XHCI_LEC(regs) ((regs->hccparams2 >> 4) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Configuration Information Capability (CIC) - RO. This bit indicates if the xHC
supports extended Configuration Information. When this bit is 1, the Configuration
Value, Interface Number, and Alternate Setting fields in the Input Control Context
are supported. When this bit is 0, the extended Input Control Context fields are not
supported. Refer to section 6.2.5.1 for more information.
*/
#define XHCI_CIC(regs) ((regs->hccparams2 >> 5) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Extended TBC Capability78 (ETC) - RO. This bit indicates if the TBC field in an
Isoch TRB supports the definition of Burst Counts greater than 65535 bytes. When
this bit is ‘1’, the Extended EBC capability is supported by the xHC. When this bit is
‘0’, it is not. Refer to section 4.11.2.3 for more information.
*/
#define XHCI_ETC(regs) ((regs->hccparams2 >> 6) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Extended TBC TRB Status Capability (ETC_TSC) - RO. This bit indicates if the
TBC/TRBSts field in an Isoch TRB indicates additional information regarding TRB in
the TD. When this bit is ‘1’, the Isoch TRB TD Size/TBC field presents TBC value and
TBC/TRBSts field presents the TRBSts value. When this bit is ‘0’ then the ETC/ETE
values defines the TD Size/TBC field and TBC/RsvdZ field. This capability shall be
enabled only if LEC = ‘1’ and ETC=’1’. Refer to section 4.11.2.3 for more information.
*/
#define XHCI_ETC_TSC(regs) ((regs->hccparams2 >> 7) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Get/Set Extended Property Capability (GSC) – RO. This bit indicates support for
the Set Extended Property and Get Extended Property commands. When this bit is
‘1’, the xHC supports the Get Extended Property and Set Extended Property
commands defined in section 4.6.17 and section 4.6.18. When this bit is ‘0’, the xHC
does not support the Get Extended Property and Set Extended Property commands
and the xHC does not support any of the associated Extended Capabilities.
This bit shall only be set to ‘1’ if the xHC supports one or more extended capabilities
that require the Get Extended Property and Set Extended Property commands.
*/
#define XHCI_GSC(regs) ((regs->hccparams2 >> 8) & 0x1)

/*
// xHci Spec Section 5.3.9 Table 5-16: Host Controller Capability Parameters 2 (HCCPARAMS2) (page 355)

Virtualization Based Trusted I/O Capability (VTC) – RO. This bit when set to
1, indicates that the xHC supports the Virtualization based Trusted IO (VTIO)
Capability. When this bit is 0, the VTIO Capability is not supported. This capability is
enabled by the VTIOE flag in the USBCMD register.
*/
#define XHCI_VTC(regs) ((regs->hccparams2 >> 9) & 0x1)

/*
// xHci Spec Section 5.4.7 Table 5-26: Configure Register Bit Definitions (CONFIG) (page 369)

Max Device Slots Enabled (MaxSlotsEn) – RW. Default = ‘0’. This field specifies
the maximum number of enabled Device Slots. Valid values are in the range of 0 to
MaxSlots. Enabled Devices Slots are allocated contiguously. For example, a value of
16 specifies that Device Slots 1 to 16 are active. A value of ‘0’ disables all Device
Slots. A disabled Device Slot shall not respond to Doorbell Register references.
This field shall not be modified by software if the xHC is running (Run/Stop (R/S) =
‘1’).
*/
#define XHCI_MAX_SLOTS_EN(config) ((config) & 0xFF)

// Returns the value of config with max device slots set to the given value
#define XHCI_SET_MAX_SLOTS_EN(config, slots) (((config) & ~0xFF) | ((slots) & 0xFF))

/*
// xHci Spec Section 5.4.7 Table 5-26: Configure Register Bit Definitions (CONFIG) (page 369)

U3 Entry Enable (U3E) – RW. Default = '0'. When set to '1', the xHC shall assert
the PLC flag ('1') when a Root Hub port transitions to the U3 State. Refer to section
4.15.1 for more information.
*/
#define XHCI_U3_ENTRY_ENABLE(config) (((config) >> 8) & 0x1)

/*
// xHci Spec Section 5.4.7 Table 5-26: Configure Register Bit Definitions (CONFIG) (page 369)

Configuration Information Enable (CIE) - RW. Default = '0'. When set to '1', the
software shall initialize the Configuration Value, Interface Number, and Alternate
Setting fields in the Input Control Context when it is associated with a Configure
Endpoint Command. When this bit is '0', the extended Input Control Context fields
are not supported. Refer to section 6.2.5.1 for more information.
*/
#define XHCI_CONFIG_INFO_ENABLE(config) (((config) >> 9) & 0x1)

/*
// xHci Spec Section 5.5.2.1 Table 5-38: Interrupter Management Register Bit Definitions (IMAN) (page 425)

Interrupt Pending (IP) - RW1C. Default = ‘0’. This flag represents the current state of the
Interrupter. If IP = ‘1’, an interrupt is pending for this Interrupter. A ‘0’ value indicates that no
interrupt is pending for the Interrupter. Refer to section 4.17.3 for the conditions that modify
the state of this flag.
*/
#define XHCI_IMAN_INTERRUPT_PENDING (1 << 0)

/*
// xHci Spec Section 5.5.2.1 Table 5-38: Interrupter Management Register Bit Definitions (IMAN) (page 425)

Interrupt Enable (IE) – RW. Default = ‘0’. This flag specifies whether the Interrupter is capable of
generating an interrupt. When this bit and the IP bit are set (‘1’), the Interrupter shall generate
an interrupt when the Interrupter Moderation Counter reaches ‘0’. If this bit is ‘0’, then the
Interrupter is prohibited from generating interrupts.
*/
#define XHCI_IMAN_INTERRUPT_ENABLE (1 << 1)

/*
// xHci Spec Section 5.5.2.3.3 Event Ring Dequeue Pointer (ERDP) (page 428)

Event Handler Busy (EHB) - RW1C. Default '0'. This flag shall be set to '1' when the IP bit is set
to '1' and cleared to '0' by software when the Dequeue Pointer register is written. Refer to
section 4.17.2 for more information.
*/
#define XHCI_ERDP_EHB (1 << 3)

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 469)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_RESERVED  0

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 469)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_NORMAL  1

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 469)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_SETUP_STAGE  2

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 469)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_DATA_STAGE  3

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 469)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_STATUS_STAGE  4

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_ISOCH  5

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_LINK  6

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_EVENT_DATA  7

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : no
Transfer Ring : yes
*/
#define XHCI_TRB_TYPE_NOOP  8

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_ENABLE_SLOT_CMD  9

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_DISABLE_SLOT_CMD  10

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_ADDRESS_DEVICE_CMD  11

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_CONFIGURE_ENDPOINT_CMD  12

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_EVALUATE_CONTEXT_CMD  13

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_RESET_ENDPOINT_CMD  14

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_STOP_ENDPOINT_CMD  15

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_SET_TR_DEQUEUE_PTR_CMD  16

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_RESET_DEVICE_CMD  17

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional, used with virtualization only)
*/
#define XHCI_TRB_TYPE_FORCE_EVENT_CMD  18

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_NEGOTIATE_BANDWIDTH_CMD  19

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_SET_LATENCY_TOLERANCE_VALUE_CMD  20

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_GET_PORT_BANDWIDTH_CMD  21

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_FORCE_HEADER_CMD  22

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_NOOP_CMD  23

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_GET_EXTENDED_PROPERTY_CMD  24

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 470)
Allowed TRB Types
-----------------
Command Ring  : yes
Event Ring    : no
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_SET_EXTENDED_PROPERTY_CMD  25

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_TRANSFER_EVENT  32

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_CMD_COMPLETION_EVENT  33

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_PORT_STATUS_CHANGE_EVENT  34

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no

Note: (Optional)
*/
#define XHCI_TRB_TYPE_BANDWIDTH_REQUEST_EVENT  35

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no

Note: (Optional, used width virtualization only)
*/
#define XHCI_TRB_TYPE_DOORBELL_EVENT  36

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_HOST_CONTROLLER_EVENT  37

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_DEVICE_NOTIFICATION_EVENT  38

/*
// xHci Spec Section 6.4.6 TRB Types Table 6-91: TRB Type Definitions (page 471)
Allowed TRB Types
-----------------
Command Ring  : no
Event Ring    : yes
Transfer Ring : no
*/
#define XHCI_TRB_TYPE_MFINDEX_WRAP_EVENT  39

// The Cycle Bit for a TRB, typically set to 1 for an initialized TRB
// (TO-DO: find exact spec page with documentation)
#define XHCI_TRB_CYCLE_BIT  0x1

// The Toggle Cycle bit for a Link TRB, used to toggle the Cycle Bit
// (TO-DO: find exact spec page with documentation)
#define XHCI_TRB_TOGGLE_CYCLE 0x2

/*
// xHci Spec Section 5.4.5 Table 5-24: Command Ring Control Register Bit Definitions (CRCR) (page 366)

Ring Cycle State (RCS) - RW. This bit identifies the value of the xHC Consumer
Cycle State (CCS) flag for the TRB referenced by the Command Ring Pointer. Refer to
section 4.9.3 for more information.

Writes to this flag are ignored if Command Ring Running (CRR) is ‘1’.

If the CRCR is written while the Command Ring is stopped (CRR = ‘0’), then the
value of this flag shall be used to fetch the first Command TRB the next time the Host
Controller Doorbell register is written with the DB Reason field set to Host Controller
Command.

If the CRCR is not written while the Command Ring is stopped (CRR = ‘0’), then the
Command Ring shall begin fetching Command TRBs using the current value of the
internal Command Ring CCS flag.

Reading this flag always returns ‘0’
*/
#define XHCI_CRCR_RING_CYCLE_STATE      (1 << 0)

/*
// xHci Spec Section 5.4.5 Table 5-24: Command Ring Control Register Bit Definitions (CRCR) (page 366)

Command Stop (CS) - RW1S. Default = ‘0’. Writing a ‘1’ to this bit shall stop the
operation of the Command Ring after the completion of the currently executing
command and generate a Command Completion Event with the Completion Code set
to Command Ring Stopped and the Command TRB Pointer set to the current value of
the Command Ring Dequeue Pointer. Refer to section 4.6.1.1 for more information on
stopping a command.

The next write to the Host Controller Doorbell with DB Reason field set to Host
Controller Command shall restart the Command Ring operation.

Writes to this flag are ignored by the xHC if Command Ring Running (CRR) = ‘0’.

Reading this bit shall always return ‘0’.
*/
#define XHCI_CRCR_COMMAND_STOP          (1 << 1)

/*
// xHci Spec Section 5.4.5 Table 5-24: Command Ring Control Register Bit Definitions (CRCR) (page 367)

Command Abort (CA) - RW1S. Default = ‘0’. Writing a ‘1’ to this bit shall
immediately terminate the currently executing command, stop the Command Ring,
and generate a Command Completion Event with the Completion Code set to
Command Ring Stopped. Refer to section 4.6.1.2 for more information on aborting a
command.
The next write to the Host Controller Doorbell with DB Reason field set to Host
Controller Command shall restart the Command Ring operation.
Writes to this flag are ignored by the xHC if Command Ring Running (CRR) = ‘0’.
Reading this bit always returns ‘0’.
*/
#define XHCI_CRCR_COMMAND_ABORT          (1 << 2)

/*
// xHci Spec Section 5.4.5 Table 5-24: Command Ring Control Register Bit Definitions (CRCR) (page 367)

Command Ring Running (CRR) - RO. Default = 0. This flag is set to ‘1’ if the
Run/Stop (R/S) bit is ‘1’ and the Host Controller Doorbell register is written with the
DB Reason field set to Host Controller Command. It is cleared to ‘0’ when the
Command Ring is “stopped” after writing a ‘1’ to the Command Stop (CS) or
Command Abort (CA) flags, or if the R/S bit is cleared to ‘0’
*/
#define XHCI_CRCR_COMMAND_RING_RUNNING   (1 << 3)

// This macro defines the bit position in the control field of a Transfer
// Request Block (TRB) where the TRB type field begins. The xHCI specification
// requires that the TRB type be placed in a specific position within the control
// field of a TRB. This macro is used to shift the TRB type value to the correct
// position when preparing a TRB.
// (TO-DO: find spec page)
#define XHCI_TRB_TYPE_SHIFT 10

// TRB Type field mask and shift
// (TO-DO: find spec page)
#define XHCI_TRB_TYPE_MASK  0xFC00 // Mask for the TRB type field

// Slot ID field mask and shift (in the status field of a Command Completion Event TRB)
// (TO-DO: find spec page)
#define XHCI_SLOT_ID_MASK   0x3F000000

// Shift for the Slot ID field
// (TO-DO: find spec page)
#define XHCI_SLOT_ID_SHIFT  24

// Completion Code field mask and shift (in the status field of a Command Completion Event TRB)
// (TO-DO: find spec page)
#define XHCI_COMPLETION_CODE_MASK   0xFF0000

// Shift for the Completion Code field
// (TO-DO: find spec page)
#define XHCI_COMPLETION_CODE_SHIFT  16

/*
// xHci Spec Section 6.4.5 Table 6-90: TRB Completion Code Definitions (page 507)

The following TRB Completion Status codes will be asserted by the Host
Controller during status update if the associated error condition is detected.
*/
#define XHCI_TRB_COMPLETION_CODE_INVALID                0
#define XHCI_TRB_COMPLETION_CODE_SUCCESS                1
#define XHCI_TRB_COMPLETION_CODE_DATA_BUFFER_ERROR      2
#define XHCI_TRB_COMPLETION_CODE_BABBLE_DETECTED_ERROR  3
#define XHCI_TRB_COMPLETION_CODE_USB_TRANSACTION_ERROR  4
#define XHCI_TRB_COMPLETION_CODE_TRB_ERROR              5
#define XHCI_TRB_COMPLETION_CODE_STALL_ERROR            6
#define XHCI_TRB_COMPLETION_CODE_RESOURCE_ERROR         7
#define XHCI_TRB_COMPLETION_CODE_BANDWIDTH_ERROR        8
#define XHCI_TRB_COMPLETION_CODE_NO_SLOTS_AVAILABLE     9
#define XHCI_TRB_COMPLETION_CODE_INVALID_STREAM_TYPE    10
#define XHCI_TRB_COMPLETION_CODE_SLOT_NOT_ENABLED       11
#define XHCI_TRB_COMPLETION_CODE_ENDPOINT_NOT_ENABLED   12
#define XHCI_TRB_COMPLETION_CODE_SHORT_PACKET           13
#define XHCI_TRB_COMPLETION_CODE_RING_UNDERRUN          14
#define XHCI_TRB_COMPLETION_CODE_RING_OVERRUN           15
#define XHCI_TRB_COMPLETION_CODE_VF_EVENT_RING_FULL     16
#define XHCI_TRB_COMPLETION_CODE_PARAMETER_ERROR        17
#define XHCI_TRB_COMPLETION_CODE_BANDWIDTH_OVERRUN      18
#define XHCI_TRB_COMPLETION_CODE_CONTEXT_STATE_ERROR    19
#define XHCI_TRB_COMPLETION_CODE_NO_PING_RESPONSE       20
#define XHCI_TRB_COMPLETION_CODE_EVENT_RING_FULL        21
#define XHCI_TRB_COMPLETION_CODE_INCOMPATIBLE_DEVICE    22
#define XHCI_TRB_COMPLETION_CODE_MISSED_SERVICE         23
#define XHCI_TRB_COMPLETION_CODE_COMMAND_RING_STOPPED   24
#define XHCI_TRB_COMPLETION_CODE_COMMAND_ABORTED        25
#define XHCI_TRB_COMPLETION_CODE_STOPPED                26
#define XHCI_TRB_COMPLETION_CODE_STOPPED_LENGTH_INVALID 27
#define XHCI_TRB_COMPLETION_CODE_STOPPED_SHORT_PACKET   28
#define XHCI_TRB_COMPLETION_CODE_MAX_EXIT_LATENCY_ERROR 29

// Helper macro to easily construct TRB command objects
#define XHCI_CONSTRUCT_CMD_TRB(type) xhci_trb_t { .parameter = 0, .status = 0, .control = type << XHCI_TRB_TYPE_SHIFT }

#define XHCI_LINK_TRB_TC_BIT (1 << 1)

/*
// xHci Spec Section 7.1.1 USB Legacy Support Capability (USBLEGSUP) (page 519)
*/
#define XHCI_LEGACY_SUPPORT_CAP_ID          1
#define XHCI_LEGACY_BIOS_OWNED_SEMAPHORE    (1 << 16)
#define XHCI_LEGACY_OS_OWNED_SEMAPHORE      (1 << 24)

/*
// xHci Spec Section 7.1.2 USB Legacy Support Control/Status (USBLEGCTLSTS) (page 520)
*/
#define XHCI_LEGACY_SMI_ENABLE               (1 << 0)   // USB SMI Enable
#define XHCI_LEGACY_SMI_ON_OS_OWNERSHIP      (1 << 13)  // SMI on OS Ownership Enable
#define XHCI_LEGACY_SMI_ON_HOST_ERROR        (1 << 4)   // SMI on Host System Error
#define XHCI_LEGACY_SMI_ON_PCI_COMMAND       (1 << 14)  // SMI on PCI Command
#define XHCI_LEGACY_SMI_ON_BAR               (1 << 15)  // SMI on BAR (Base Address Register)

#define XHCI_LEGACY_SMI_ENABLE_BITS \
    (XHCI_LEGACY_SMI_ENABLE | XHCI_LEGACY_SMI_ON_OS_OWNERSHIP | XHCI_LEGACY_SMI_ON_HOST_ERROR | \
     XHCI_LEGACY_SMI_ON_PCI_COMMAND | XHCI_LEGACY_SMI_ON_BAR)

/*
// xHci Spec Section 7.0 Table 7-1: Format of xHCI Extended Capability Pointer Register
*/
#define XHCI_NEXT_EXT_CAP_PTR(ptr, next) (volatile uint32_t*)((char*)ptr + (next * sizeof(uint32_t)))

/*
// xHci Spec Section 6.2.2 Figure 6-2: Slot Context Data Structure (page 407)

Slot State. This field is updated by the xHC when a Device Slot transitions from one state to
another.

Value Slot State
    0 Disabled/Enabled
    1 Default
    2 Addressed
    3 Configured
    4 Reserved

Slot States are defined in section 4.5.3.
As Output, since software initializes all fields of the Device Context data structure to ‘0’, this field
shall initially indicate the Disabled state.
As Input, software shall initialize the field to ‘0’.
Refer to section 4.5.3 for more information on Slot State.
*/
#define XHCI_SLOT_STATE_DISABLED_ENABLED    0
#define XHCI_SLOT_STATE_DEFAULT             1
#define XHCI_SLOT_STATE_ADDRESSED           2
#define XHCI_SLOT_STATE_CONFIGURED          3
#define XHCI_SLOT_STATE_RESERVED            4

#define XHCI_ENDPOINT_STATE_DISABLED    0
#define XHCI_ENDPOINT_STATE_RUNNING     1
#define XHCI_ENDPOINT_STATE_HALTED      2
#define XHCI_ENDPOINT_STATE_STOPPED     3
#define XHCI_ENDPOINT_STATE_ERROR       4

#define XHCI_ENDPOINT_TYPE_INVALID          0
#define XHCI_ENDPOINT_TYPE_ISOCHRONOUS_OUT  1
#define XHCI_ENDPOINT_TYPE_BULK_OUT         2
#define XHCI_ENDPOINT_TYPE_INTERRUPT_OUT    3
#define XHCI_ENDPOINT_TYPE_CONTROL          4
#define XHCI_ENDPOINT_TYPE_ISOCHRONOUS_IN   5
#define XHCI_ENDPOINT_TYPE_BULK_IN          6
#define XHCI_ENDPOINT_TYPE_INTERRUPT_IN     7

/*
// xHci Spec Section 7.2.1 Protocol Speed ID (PSI) (page 524)

Protocol Speed ID (PSI) Dwords immediately follow the Dword at offset 10h in
an xHCI Supported Protocol Capability data structure. Table 7-10 defines the
fields of a PSI Dword.
*/
#define XHCI_USB_SPEED_UNDEFINED            0
#define XHCI_USB_SPEED_FULL_SPEED           1 // 12 MB/s USB 2.0
#define XHCI_USB_SPEED_LOW_SPEED            2 // 1.5 Mb/s USB 2.0
#define XHCI_USB_SPEED_HIGH_SPEED           3 // 480 Mb/s USB 2.0
#define XHCI_USB_SPEED_SUPER_SPEED          4 // 5 Gb/s (Gen1 x1) USB 3.0
#define XHCI_USB_SPEED_SUPER_SPEED_PLUS     5 // 10 Gb/s (Gen2 x1) USB 3.1

// (TO-DO: Find spec page)
#define XHCI_DOORBELL_TARGET_COMMAND_RING       0
#define XHCI_DOORBELL_TARGET_CONTROL_EP_RING    1

#endif // XHCI_H
